 read problem statements in hindi bengali mandarin chinese russian and vietnamese as well  chef is on an adventure to find the tastiest exotic spices  everyone knows that the best spices are guarded by several ancient dragons that dwell within mountains  the mountain range can be modeled by a polyline in the d xzxz plane that passes through nn points phph…pnnhnphph…pnnhn in this order where hihi is a positive integer for each valid ii  this polyline divides the set of points xz≤x≤nxz≤x≤n into two regions  the solid part of the mountain range is the bottom region i e  the region that contains the xxaxis the xaxis is the line zz  a dragons den is located at each of the nn points  for each valid ii the den at the point pipi initially contains a pile of spices with tastiness aiai  with a technique he learned from dragons chef can glide from den to den tasting all of the spices along the way  the tastiness of an entire journey is the summed up tastiness of spices over all dens visited during the journey  however there are some restrictions  chef can only glide from a higher den to a strictly lower den i e  if he glides from a den at pipi to a den at pjpj then hihjhihj must hold  chef can only glide in one direction and never look back i e  if he starts travelling in the direction of decreasing xx he must keep travelling in that direction until the end of the journey and if he starts travelling in the direction of increasing xx he must keep travelling in that direction until the end of the journey too  chef cannot travel through solid mountain i e  he can only glide from a den at pipi to a den at pjpj if the line segment connecting the points pipi and pjpj does not intersect the solid part of the mountain range  however it may touch the border of the mountain range i e  the polyline itself   note that gliding is the only way for chef to travel between dens   it is valid for a journey to begin and end at the same den in which case chef tastes the spices at the den and nothing else  see the explanation of the sample test case for a concrete example  with that in mind chef needs you to process qq queries  there are two types of queries   b k chef changes his mind and decides that the tastiness of the spices in the den at the point pbpb should be changed to kk instead   b c chef wants to start a journey at the den located at pbpb and end it at the den located at pcpc  find the maximum possible tastiness of such a journey or determine that no such journey exists    input  the first line of the input contains two spaceseparated integers nn and qq  the second line contains nn spaceseparated integers hh…hnhh…hn  the third line contains nn spaceseparated integers aa…anaa…an  then qq lines follow  each of these lines contains three spaceseparated integers describing a query in the above format   output for each query of the second type print a single line containing one integer ― the maximum tastiness of a journey or −− if no valid journey exists  constraints  ≤nq≤⋅≤nq≤⋅ ≤hi≤≤hi≤ for each valid ii ≤ai≤≤ai≤ for each valid ii ≤bc≤n≤bc≤n ≤k≤≤k≤  subtasks subtask   points nq≤nq≤ subtask   points there are no queries of the first type subtask   points original constraints                          sample input                                                                             sample output                               explanation here is an illustration of the mountain range described in the first sample test case  query  starting at pp height  chef can glide to pp height  and then to pp height   the total tastiness of this journey is aaaaaa      query  the value of aa is set to   query  chef glides from pp to pp  the tastiness is aaaa  query  it is impossible to get from pp to pp  even if hhhh to reach pp chef would need to fly either upwards or through the mountain both of which are impossible    author ★shisuko editorial  codechef comproblemsdrgnden tags                                   stacks trees segment trees fenwick trees hld dfs order                                                              data structures graphs advanced data structures advanced tree structures advanced algorithms advanced graph algos algorithms graph algos traversals dfs                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages cpp pyth   java c cpp pyth pyp cs ada pypy text pas fpc nodejs ruby php go hask tcl kotlin perl scala lua bash js rust lisp sbcl pas gpc bf cloj r d caml swift fort asm fs wspc lisp clisp sql scm guile perl erl clps prlg sqlq ick nice icon cob scm chicken pike scm qobi st nem  submit