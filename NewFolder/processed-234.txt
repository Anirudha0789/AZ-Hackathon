  read problems statements in mandarin chinese  and russian   being a cs student ron really dont understand why he has to take a compulsory course called art in digital age   the objective of this course from what his school said is to help the cs students release the stress by doing something new other from codingprogramming  the problem is ron really love coding and he doesnt care about other stuff  this course even gives him  more stress  however like it or not ron still need to try his best not to let this course ruins his great gpa   can you help him with his first assignment which is described below  in this assignment ron is given an n×n pixels image called sample image  ron is required to create a copy of the  sample image using an simple graphic painting program called smpaint  only two types of operation can be used in smpaint  init make the new image with the specific size all the pixels of the new image are white  paint user gives  integers c u d l r and smpaint will change colour to c at all the pixels x y such that u ≤ x ≤ d and l ≤ y ≤ r  the pixel x y is the pixel at the xth row from the top indexed and the yth column from the left side indexed    we can see that the paint operation actually is painting a specific rectangle in the image by one specific colour  the image in the figure  can be drawn using  calls of the second function if we paint the red rectangle first and then paint two  green rectangles  notice that if a pixel is changed colour several time it final colour is corresponding to the last time it is painted   this help us save some calls of the second function  for the image in figure  we can paint a large green rectangle first and then paint the red rectangle  your mission is help ron finish the assignment with using as least as possible number of calls of the second function   xa input the first line of the input contains integer n  each of the next n lines contains n integers  the yth number in the xth line  represent the colour of the pixel x y in the sample image   output the first line of the output must contain integer m that is the number of calls of the second function you need   the next m lines represent the calls to the second function in chronological order   each line must contain  integers which are the values they must be in this order c u d l r for the corresponding call  the following conditions must be held    ≤ c ≤   ≤ u ≤ d ≤ n  ≤ l ≤ r ≤ n  constraints   ≤ n ≤  the colours are represented by integers from  to  where  means white colour   example input                            output             xa  scoring  the test data generation   your solution will not get point if it performs more than n paint operations or the final image is different  with the sample one  your solution will be marked as wrong answer for that two cases   if the number of paint operations does not exceed n and the final image is the same as the sample one you will get the score which is equal to the number of paint operations  smaller score means your solution is better     the test data is generated randomly by simulating the process of making an image in smpaint using no more than  paint operations  but please note that the value of n is picked manually     we have  official test files  you must correctly solve all test files to receive ok   during the contest your overall score is the sum of the scores on the first  test files   after the contest all solutions will be rescored by the sum of the scores on the rest  test files  note that public part of the tests can not contain some border cases  for example we should say that  in all public tests  ≤ n holds    author tuanadm tester ★gerald editorial  codechef comproblemssmpaint tags                                   challenge dec dynamicprogramming greedy heuristic tuanadm                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages pyth   java c cpp pyth pyp cs ada text pas fpc nodejs ruby php go hask tcl perl scala lua bash js lisp sbcl pas gpc bf cloj d caml fort asm fs wspc lisp clisp scm guile perl erl clps prlg ick nice icon pike scm qobi st nem  submit