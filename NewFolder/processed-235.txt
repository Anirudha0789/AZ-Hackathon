  read problems statements in mandarin chinese russian and vietnamese as well  there is a cluster of computers  each computer is referred as a node  you are the maintainer of the cluster  your job is to execute various jobs that you receive for execution  you can transfer a job from a node on the cluster to some other node  it will require some network cost  the jobs come in the batches  each job will have its desired initial node on which it was thought to be run by its programmer  it will also require some processing power to run in a node  you have to process the jobs of the batch i e  you have to decide on which node the job should be executed  you can transfer the job through various nodes before assigning the final node   being the cluster maintainer your aim is to optimally use the resources of the cluster  you want the load on the nodes of the cluster to be balanced  also you dont want to spend a huge networking cost in transferring the jobs in between the nodes   input the problem is an interactive challenge problem  first line of the input will contain four space separated integers n m b c denoting number of nodes in the cluster the total number of batches of the jobs batch size i e  number of jobs per batch and maximum network cost that you can afford respectively  each of the next n lines contains n space separated integers denoting the network cost required for moving the job among corresponding nodes  each of the next m lines contains   b integers denoting the nodes on which the job was scheduled to run and the processing power it will require  output after reading a batch you should output b integers each showing the corresponding node on which the job is assigned  note that network cost spent in moving this job from a node to other node will be equal to shortest network cost required  example inputtoutput             tt tt     tt tt  explanation  in our example number of nodes number of batches and number of jobs per batch and networking cost all are equal to   cost of moving a job from node  to node  is    in the first batch there are two jobs first job is intended to run at node   it will require a processing power of   the second job is intended to run on node  requiring a processing power of  units  you have decided to run job  at node  and job  at node  i e  at the nodes where they were initially supposed to run  so no network cost has been incurred for it  in the second batch there are two jobs also first job is intended to run at node   it will require a processing power of  units  the second job is intended to run on node  requiring a processing power of  units  you have decided to run job  at node  and job  at node   for first job you are moving the job from the node  to node  for which you have to spend a network cost of  units  similarly job  also requires a networking cost of  units   total network cost incurred in this solution is  units which was the maximum network cost allowed   scoring after assigning all the jobs of a batch load unbalancing factor of the cluster will be measured  let load on a node be total sum of processing powers of the jobs assigned on this cluster  please note that his accounts for all the jobs assigned to this node not just the jobs assigned in the current batch  in particular it will also include all older batches of jobs too  load unbalancing factor of the cluster will be equal to maximum load on some node minus the minimum load on some node  total unbalancing factor will be sum of load unbalancing factor over all the batch jobs   let us calculate the load unbalancing factor in the above example   let us consider the first batch of jobs  at node  we are running a job requiring processing power of  units and that at node  of  units  so load unbalancing factor is        after assigning the jobs of the second batch we have two jobs at node  each of  units i e  total  units of processing power required  at the second node we have two jobs running one requiring a processing power of  and other of  total  units  so load unbalancing factor is       overall total sum of load unbalancing factors for these two batches will be       so your score will be    test generation process  there will be two types of data sets small and large   test files for each  during the contest the score will be shown for only  of the test cases i e   files from each of the data sets  please note that your submission will be run for all the  test files  for getting an ac verdict your program should get an ac verdict for all the  files  reiterating the score shown will only be for the  of data i e   files  your final score on all the files will be shown after the end of the contest only  here is the test generation process for small and large data sets of the problem  values of n m b each will be fixed to  for small data set and  for large data set  maximum network cost c will be generated uniformly randomly from   m  b to   m  b  the network cost required for moving a job from a node to other node will be generated uniformly randomly from  to   note that you are guaranteed that cost function will be symmetric i e  the cost of moving a job from node x to node y will be same as that of moving job from node y to node x  also the cost of moving a job from a node to the same node will be zero  for each job in a batch the node on which job is to be scheduled will be generated uniformly randomly from  to n  processing power of the job will also be generated uniformly randomly from  to    here are some possible things you should keep in mind for making sure your submission does not get an wa wrong answer verdict  you have to process each batch of jobs before reading the next batch  please dont forget to flush the standard output before reading the next batch  you can flush standard output by using fflushstdout in cc  total network cost for moving the jobs from one node should not maximum network cost c   finally your aim is to minimize the total load unbalancing factor    author admin tester â˜…mugurelionut editorial  codechef comproblemsclussche tags                                   admin challenge greedy july randomized                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages pyth   java c cpp pyth pyp cs ada pypy text pas fpc nodejs ruby php go hask tcl perl scala lua bash js lisp sbcl pas gpc bf cloj d caml fort asm fs wspc lisp clisp scm guile perl erl clps prlg ick nice icon scm chicken pike scm qobi st nem  submit