  read problems statements in mandarin chinese russian and vietnamese as well  chef is working as a programmer  his job schedule is very interesting he rests for r minutes works for some time then rests for r minutes then works some more and so on   by the way chef has m books he wants to read  each book has some given number of pages and chef reads one page per minute independent of which page of whichever book it is  chef has two types of books to read the first type are too interesting for an interrupted read and therefore need to be finished in one continuous reading session that is some ith resting period or a part of it  books of the second type are more casual reads which can be split up in any way between different resting periods read a few pages then read another book or do the job and continue later   chef is getting tired when switch that is why each book can be read for some times only once per rest   let us take an example if chef has a rest period array r   and books types to read st  min nd  min  chef can finish the first book in the first rest period minutes from st to rd and use the th minute of first period along with the second and third periods to finish the second book   some books are part of a series and need to be read in order  in other words some books cant be started until some other books are done  you are given this information in the form of pairwise dependencies indicating that one book cannot be started before the other is finished  chef promises that there are no cycles across these directed dependencies  each book has a rating expressed as a positive integer  when chef finishes a book his happiness increases by this number   scoring  for each test your result will be defined as the sum of ratings of books you finish  the total score for a submission is the sum of the scores for all test cases  your task is to maximize the total score   input  the first line of each test case contains three integers — n denoting the number of rest periods m denoting the number of books and k denoting the number of dependencies  the second line contains n spaceseparated integers r r … rn denoting the duration of each period  next m lines describe the books with the ith line describing the ith book  each line contains tree integers ti pi and wi  ti is the type of the ith book  pi is the number of pages in it  wi is the rating of the book  next k lines describe the interbook dependencies  each line contains two integers — a and b — denoting that book a should be finished before book b can be started  the books are indexed in the order of their description in the input   output  for each rest period output a single line  the first integer in the line must be k the number of books you read fully or partially in this period  follow this up with two integers for each book i — the index of the book you chose books are enumerated from  to m as they are given in input and w — the number of minutes you spent on it  you are not allowed two print one book twice in one line   you cant read the book if it is already finished  sum of all w in a line should not be bigger than the rest period duration  if you do nothing in a rest period just print   any book of the first type should occur at most once in the output  if chef reads such a book it should be done completely in one segment  chef cant start book b until he finishes book a if there is a dependency a b in the input   constraints   ≤ n  ≤   ≤  m k ≤   ≤ ri≤   ≤ pi≤   ≤ ti ≤   ≤ wi ≤   ≤ a b ≤ m  example input                                    output                    test generation plan  sum of ris will be rand     sum of pis will be rand  sum of rs   sum of rs  let rmin and rmax denote the minimum and maximum values of ri respectively  rmin will be rand    rmax will be randrmin      we will generate the number of pages of the books in an incremental fashion such that number of pages in a book will be randrmin   rmax     there are total  types of test files whose description is given below  please note that the total number of books of type  in each test case will be rand  unless stated otherwise   type   we will generate a directed acyclic graph dag encoding the dependencies of books  each connected component of the dag has rand  vertices  the rating of a book depends on the number of pages in it and the minimum number of books that need to be finished before starting that particular book  the ratio of weight  number of pages will be in the range   for books of the first type and    for that of second type  type   the dag generator will be same as above  rating of each book is computed as rand  type   same as type  but with no books of the second type  type   same as type  except that the underlying dag will be a collections of paths   we have  test files  for each type  during the contest your solution will run on all the test files  if your program gives watlere on any of the test files out of  it will be reported to you  on the other hand if you get an ac then the score reported to you is not the total score for all the files instead it is only the score for  test files one of each type                                                                                      author berezin editorial  codechef comproblemschefjr tags                                   berezin challenge feb greedy                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages pyth   java c cpp pyth pyp cs ada text pas fpc nodejs ruby php go hask tcl perl scala lua bash js lisp sbcl pas gpc bf cloj d caml fort asm fs wspc lisp clisp scm guile perl erl clps prlg ick nice icon pike scm qobi st nem  submit