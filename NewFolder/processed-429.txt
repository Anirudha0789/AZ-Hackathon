  read problems statements in mandarin chinese and russian as well  chef gets n orders  the orders are numbered from  to n  he gets order i at si time and this order contains xi number of items  chef needs to serve each of these xi items before di time and for each unit of items he cannot cook before this deadline he needs to pay pi unit of money as penalty  given all of the orders help the chef to minimize the penalty he will have to pay   important note chef can cook at most one item at a unit time and for each item he needs exactly one unit of time to cook  also chef can serve an item instantly when the item is cooked  if chef wants to serve an item at time t then the latest he can cook that item is at time time t  in another words for order i chef can cook the items at time units si si si     di  please note that chef can not cook items from order i exactly at time unit di    input the first line of the input contains an integer t denoting the number of test cases  the description of t test cases follows  each test case starts with a line containing n the number of orders  each of the next n lines contains the description of an order  order i is given as a four integers si xi di and pi in a single line separated by a single space    output for each test case output a single line containing the minimum amount of penalty chef has to pay   constraints   ≤ t ≤   ≤ n ≤   ≤ si ≤   ≤ xi ≤   ≤ di ≤   ≤ pi ≤  sixi ≤ di  xa example input                                                    output      xa explanation example  there is only  order and all of the items from this order can be served  so zero penalty example  there are two orders and you cannot serve  items  you can select these  items from any order  example  there are two orders and you cannot serve  items  but it is better not to serve these  items from the first order   author satejadm tester ★gerald editorial  codechef comproblemsorderaam tags                                   min cost max flow greedy sorting implementation                                                              advanced algorithms advanced graph algos flow networks maximum flow algorithms                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages pyth   java c cpp pyth pyp cs ada text pas fpc nodejs ruby php go hask tcl perl scala lua bash js lisp sbcl pas gpc bf cloj d caml fort asm fs wspc lisp clisp scm guile perl erl clps prlg ick nice icon pike scm qobi st nem  submit