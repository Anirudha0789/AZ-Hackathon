 djenka has a rooted tree with nn nodes numbered  through nn and n−n− edges node  is the root  for each ii ≤i≤n−≤i≤n− the iith edge connects node ii with its parent node pipi and it has capacity cici  each node can store an arbitrary nonnegative amount of water  the capacity of each edge denotes the maximum amount of water which can flow across this edge in one second ― if xx units of water flow from one endpoint of this edge xx may be any nonnegative real number not exceeding the capacity of the edge at a time tt then xx units of water flow into the other endpoint of this edge at time tt  at the beginning at time  there is an infinite amount of water in the root and all other nodes are empty  for each node at any time you may choose the amount of water that flows from it to each of its children in an arbitrary way possibly a different amount of water for different children as long the amount of water flowing across each edge does not exceed its capacity and the total amount of water flowing from this node does not exceed the amount of water which is currently stored in it  for each leaf of the tree a leaf is a node without children all water that flows into this node remains stored in it  djenka is interested in the minimum time in seconds such that it is possible to have at least xx units of water in total stored in the leaves at this time i e  the sum of amounts of water stored in all leaves is at least xx  can you help djenka find it input  the first line of the input contains a single integer tt denoting the number of test cases  the description of tt test cases follows  the first line of each test case contains two spaceseparated integers nn and xx  the second line contains n−n− spaceseparated integers pp…pnpp…pn  the third line contains n−n− spaceseparated integers cc…cncc…cn   output for each test case print a single line containing one integer ― the minimum time needed to store enough water in leaves  constraints  ≤t≤≤t≤ ≤n≤≤n≤ ≤x≤≤x≤ ≤pii≤pii for each valid ii ≤ci≤≤ci≤ for each valid ii the sum of nn over all test cases does not exceed ⋅⋅  subtasks subtask   points  ≤nx≤≤nx≤ ≤ci≤≤ci≤ for each valid ii  subtask   points  ≤n≤≤n≤ ≤x≤≤x≤ ≤ci≤≤ci≤ for each valid ii the sum of nn over all test cases does not exceed   subtask   points original constraints                          sample input                                                              sample output                              author ★allllekssssa editorial  codechef comproblemstref tags                                   trees dp on trees greedy observation                                                              data structures graphs advanced algorithms advanced dp algorithms                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages pyth   java c cpp pyth pyp cs ada pypy text pas fpc nodejs ruby php go hask tcl kotlin perl scala lua bash js rust lisp sbcl pas gpc bf cloj r d caml swift fort asm fs wspc lisp clisp scm guile perl erl clps prlg ick nice icon cob scm chicken pike scm qobi st nem  submit