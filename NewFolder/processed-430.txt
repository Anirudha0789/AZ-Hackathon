 you have an array pp of length nn  also in front of you there are nn bags of gems lined up in a row where the iith bag from the left has pipi gems in it   you can take any bags of gems from them following the given rules  you are not allowed to take two adjacent bags   you are allowed to take at most kk bags   for each value of kk from  to ⌈n⌉⌈n⌉ find the maximum number of gems you can obtain  since the answers may be too large print them modulo   input format  the first line contains tt  the number of test cases  then the test cases follow  the first line of each test case contains an integer nn  the number of bags of gems  the second line contains nn spaceseparated integers pp…pnpp…pn   output format for each test case print a single line containing ⌈n⌉⌈n⌉ integers  the kkth of them is the maximum number of gems you can obtain if you take no more than kk bags modulo    constraints  ≤t≤≤t≤ ≤n≤⋅≤n≤⋅ ≤pi≤n≤pi≤n the sum of nn over all test cases does not exceed ⋅⋅                         sample input                                                                            sample output                                      explanation test case  for kk it is optimal to pick index   therefore the number of gems pp  for kk optimal selection is exactly same   test case  for kk it is optimal to pick indices   therefore the number of gems pp  for kk it is optimal to pick indices   therefore the number of gems pppp  for kk it is optimal to pick indices   therefore the number of gems pppppp    author dannyboy tester ★tabr editorial  codechef comproblemspo tags                                   cook dannyboy disjointsetunion greedy medium                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages cpp pyth   java c cpp pyth pyp cs ada pypy text pas fpc nodejs ruby php go hask tcl kotlin perl scala lua bash js rust lisp sbcl pas gpc bf cloj r d caml swift fort asm fs wspc lisp clisp sql scm guile perl erl clps prlg sqlq ick nice icon cob scm chicken pike scm qobi st nem  submit