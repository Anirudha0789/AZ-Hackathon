 youre given a sequence of nn  distinct positive integers not necessarily sorted in ascending order  your task is pretty straightforward sort the sequence in ascending order  at any point of time you can perform one of the following operations  if there is only one sequence with a length greater than  split it at some point to divide it into two nonempty sequences  the cost to perform this operation is the minimum of the sizes of the two broken parts  if there are multiple sequences due to one or more split operations in the past you may choose one of them with a length greater than  and split it at some point to divide it into two nonempty sequences  the cost to perform this operation is the minimum of the sizes of the two broken parts  if there are multiple sequences due to one or more split operations in the past you may choose two of them and concatenate them in any order  the cost to perform this operation is the length of the resulting sequence i e  the sum of the lengths of the first and the second part   it turns out that there are a lot of ways to sort the array by following this scheme you need to find out the minimum cost of all the operations required to sort the array in the optimal manner  input format  each test file contains multiple test cases  the first line contains the number of test cases tt  description of the test cases follows  the first line of each test case contains a single integer nn the length of the array  the second line of each test case contains nn spaceseparated integers the elements of the array   output format for each test case output in a single line the minimum cost of operations that is required to sort the array according to the given scheme  constraints  ≤t≤≤t≤ ≤n≤≤n≤ ≤ai≤≤ai≤                         sample input                                                                  sample output                              explanation  in the first test case we can achieve an optimal cost of  with the following sequence of operations first split the sequence  between  and  into two new sequences  and   we have two sequences now   the cost to perform this operation is minlengthxalengthminlengthxalength  minmin    now split the sequence  between  and  into two new sequences  and   we have three sequences now   the cost to perform this operation is minlengthxalengthminlengthxalength  minmin    now concatenate the sequences  and  in this order to form a new sequence   we have two sequences now   the cost to perform this operation is lengthlengthlengthlength      now concatenate the sequences  and  in this order to form a new sequence   we have one sequence now  which is sorted as desired  the cost to perform this operation is lengthlengthlengthlength      hence the total cost      in the second test case we notice that the sequence is already in ascending order  hence we need not do any operations  the total cost is  without a scratch    author ★hitchhiker editorial  codechef comproblemsdejavu tags                                   topdown bottomup greedy sorting                                                              algorithms dynamic programming dp approach                                                                                        difficulty rating                        date added  time limit  secs source limit  bytes languages cpp pyth   java c cpp pyth pyp cs ada pypy text pas fpc nodejs ruby php go hask tcl kotlin perl scala lua bash js rust lisp sbcl pas gpc bf cloj r d caml swift fort asm fs wspc lisp clisp sql scm guile perl erl clps prlg sqlq ick nice icon cob scm chicken pike scm qobi st nem  submit